/*
 * This file is generated by jOOQ.
 */
package demo.kireev.paymentprocessorservice.jooq.tables;


import demo.kireev.paymentprocessorservice.jooq.Keys;
import demo.kireev.paymentprocessorservice.jooq.Public;

import java.math.BigDecimal;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notification extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.notification</code>
     */
    public static final Notification NOTIFICATION = new Notification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.notification.id</code>.
     */
    public final TableField<Record, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.notification.status</code>.
     */
    public final TableField<Record, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.notification.currency</code>.
     */
    public final TableField<Record, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.notification.price</code>.
     */
    public final TableField<Record, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.notification.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.notification.payment_confirm</code>.
     */
    public final TableField<Record, Boolean> PAYMENT_CONFIRM = createField(DSL.name("payment_confirm"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.notification.stock_confirm</code>.
     */
    public final TableField<Record, Boolean> STOCK_CONFIRM = createField(DSL.name("stock_confirm"), SQLDataType.BOOLEAN, this, "");

    private Notification(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Notification(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.notification</code> table reference
     */
    public Notification(String alias) {
        this(DSL.name(alias), NOTIFICATION);
    }

    /**
     * Create an aliased <code>public.notification</code> table reference
     */
    public Notification(Name alias) {
        this(alias, NOTIFICATION);
    }

    /**
     * Create a <code>public.notification</code> table reference
     */
    public Notification() {
        this(DSL.name("notification"), null);
    }

    public <O extends Record> Notification(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.NOTIFICATION_PKEY;
    }

    @Override
    public Notification as(String alias) {
        return new Notification(DSL.name(alias), this);
    }

    @Override
    public Notification as(Name alias) {
        return new Notification(alias, this);
    }

    @Override
    public Notification as(Table<?> alias) {
        return new Notification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(String name) {
        return new Notification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(Name name) {
        return new Notification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(Table<?> name) {
        return new Notification(name.getQualifiedName(), null);
    }
}
