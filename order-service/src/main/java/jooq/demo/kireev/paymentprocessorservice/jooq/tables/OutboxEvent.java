/*
 * This file is generated by jOOQ.
 */
package demo.kireev.paymentprocessorservice.jooq.tables;


import demo.kireev.paymentprocessorservice.jooq.Keys;
import demo.kireev.paymentprocessorservice.jooq.Public;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OutboxEvent extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.outbox_event</code>
     */
    public static final OutboxEvent OUTBOX_EVENT = new OutboxEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.outbox_event.id</code>.
     */
    public final TableField<Record, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.outbox_event.aggregatetype</code>.
     */
    public final TableField<Record, String> AGGREGATETYPE = createField(DSL.name("aggregatetype"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.outbox_event.aggregateid</code>.
     */
    public final TableField<Record, String> AGGREGATEID = createField(DSL.name("aggregateid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.outbox_event.type</code>.
     */
    public final TableField<Record, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.outbox_event.payload</code>.
     */
    public final TableField<Record, JSONB> PAYLOAD = createField(DSL.name("payload"), SQLDataType.JSONB.nullable(false), this, "");

    private OutboxEvent(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private OutboxEvent(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.outbox_event</code> table reference
     */
    public OutboxEvent(String alias) {
        this(DSL.name(alias), OUTBOX_EVENT);
    }

    /**
     * Create an aliased <code>public.outbox_event</code> table reference
     */
    public OutboxEvent(Name alias) {
        this(alias, OUTBOX_EVENT);
    }

    /**
     * Create a <code>public.outbox_event</code> table reference
     */
    public OutboxEvent() {
        this(DSL.name("outbox_event"), null);
    }

    public <O extends Record> OutboxEvent(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, OUTBOX_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.OUTBOX_EVENT_PKEY;
    }

    @Override
    public OutboxEvent as(String alias) {
        return new OutboxEvent(DSL.name(alias), this);
    }

    @Override
    public OutboxEvent as(Name alias) {
        return new OutboxEvent(alias, this);
    }

    @Override
    public OutboxEvent as(Table<?> alias) {
        return new OutboxEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OutboxEvent rename(String name) {
        return new OutboxEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutboxEvent rename(Name name) {
        return new OutboxEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OutboxEvent rename(Table<?> name) {
        return new OutboxEvent(name.getQualifiedName(), null);
    }
}
